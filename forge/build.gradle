plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "io.freefair.lombok"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        dataGen {
            mod "${project.mod_id}"
        }

        launches {
            data {
                arg "--existing", file("../common/src/main/resources").absolutePath
                arg "--existing-mod", "create"
            }
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.mc_version}-${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
   //  modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    modApi "dev.murad.littlelogistics:littlelogistics:${rootProject.ll_version}"
    modApi "com.jozufozu.flywheel:Flywheel-Forge:${rootProject.flywheel_version}"
    modApi "com.simibubi.create:Create:${rootProject.create_version}"
}

processResources {
    exclude ".cache/cache"

    inputs.property "version", project.version

    from project(":common").sourceSets.main.resources

    // will replace ${} strings inside mods.toml
    filesMatching("META-INF/mods.toml") {
        expand  "mod_id":                   project.mod_id,
                "mod_version":              project.mod_version,
                "mod_icon_path":            project.mod_icon_path,
                "mod_title":                project.mod_title,
                "mod_description":          project.mod_description,
                "mod_url":                  project.mod_url,
                "mod_author":               project.mod_author,
                "mod_license":              project.mod_license,
                "mc_version_range":         project.mc_version_range,
                "forge_version_range":      project.forge_version_range,
                "patchouli_version_range":  project.patchouli_version_range,
                "create_version_range":     project.create_version_range,
                "ll_version_range":     project.ll_version_range
    }
    filesMatching("pack.mcmeta") {
        expand "mod_id": project.mod_id
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archivesBaseName + "-" + project.name
            from components.java
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }

        maven {
            name = "edtoaster"
            url = uri("https://maven.edtoaster.ca/")

            credentials {
                username = System.getenv("EDTOASTER_MAVEN_USER")
                password = System.getenv("EDTOASTER_MAVEN_PASS")
            }
        }

        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/EDToaster/LittleContraptions")

            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}