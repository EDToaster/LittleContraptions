plugins {
    id "io.freefair.lombok" version "6.4.1"
    id 'net.minecraftforge.gradle' version "${forge_gradle_version}"
    id 'org.parchmentmc.librarian.forgegradle' version "${parchment_gradle_version}"

    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'org.spongepowered.mixin' version '0.7.+'
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: mappings_channel, version: mappings_version

    runs {
        configureEach {
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }

        client {
            workingDirectory project.file('run')
            ideaModule "${project.mod_id}.forge.main"
            jvmArg "-XX:+AllowEnhancedClassRedefinition"
            mods {
                "${project.mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${project.mod_id}.forge.main"
            mods {
                "${project.mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${project.mod_id}.forge.main"

            args '--mod', "${project.mod_id}", '--all',
                    '--existing', file('src/main/resources').toString(),
                    '--existing', file('src/generated/resources').toString(),
                    '--existing-mod', 'create',
                    '--output', file('src/generated/resources/')

            mods {
                "${project.mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    implementation fg.deobf("dev.murad.littlelogistics:littlelogistics:${ll_version}")
    implementation fg.deobf("com.jozufozu.flywheel:${flywheel_version}")
    implementation fg.deobf("curse.maven:create-328085:${curseforge_create_version}")

    compileOnly fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
}

processResources {
    exclude ".cache/cache"

    inputs.property "version", project.version

    // will replace ${} strings inside mods.toml
    filesMatching("META-INF/mods.toml") {
        expand  "mod_id":                   project.mod_id,
                "mod_version":              project.mod_version,
                "mod_icon_path":            project.mod_icon_path,
                "mod_title":                project.mod_title,
                "mod_description":          project.mod_description,
                "mod_url":                  project.mod_url,
                "mod_author":               project.mod_author,
                "mod_license":              project.mod_license,
                "mc_version_range":         project.mc_version_range,
                "forge_version_range":      project.forge_version_range,
                "patchouli_version_range":  project.patchouli_version_range,
                "create_version_range":     project.create_version_range,
                "ll_version_range":         project.ll_version_range
    }

    filesMatching("pack.mcmeta") {
        expand "mod_id": project.mod_id
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_author,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": mod_version,
                "Implementation-Vendor" : mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy 'reobfJar'
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archivesBaseName + "-" + project.name
            from components.java
        }
    }

    repositories {
        maven { url "file:///${project.projectDir}/mcmodsrepo" }

        maven {
            name = "edtoaster"
            url = uri("https://maven.edtoaster.ca/")

            credentials {
                username = System.getenv("EDTOASTER_MAVEN_USER")
                password = System.getenv("EDTOASTER_MAVEN_PASS")
            }
        }

        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/EDToaster/LittleContraptions")

            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}